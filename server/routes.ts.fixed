import type { Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupAuth } from "./auth";
import multer from "multer";
import path from "path";
import fs from "fs";
import { handleChatRequest } from "./chatbot";
import { 
  insertProjectSchema, 
  insertTaskSchema, 
  insertProjectMemberSchema, 
  insertCommentSchema,
  insertActivitySchema,
  TaskStatus,
  ProjectStatus,
  UserRole
} from "@shared/schema";

// Configure multer for file uploads
const uploadDir = path.join(process.cwd(), "uploads");
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

const upload = multer({
  storage: multer.diskStorage({
    destination: (req: Express.Request, file: Express.Multer.File, cb: (error: Error | null, destination: string) => void) => {
      cb(null, uploadDir);
    },
    filename: (req: Express.Request, file: Express.Multer.File, cb: (error: Error | null, filename: string) => void) => {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      cb(null, uniqueSuffix + path.extname(file.originalname));
    }
  }),
  limits: {
    fileSize: 50 * 1024 * 1024, // 50MB limit
  }
});

// Authentication middleware
function isAuthenticated(req: Request, res: Response, next: Function) {
  if (req.isAuthenticated()) {
    return next();
  }
  res.status(401).json({ message: "Unauthorized" });
}

// Role check middleware
function hasRole(roles: string[]) {
  return (req: Request, res: Response, next: Function) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const userRole = req.user?.role;
    if (!userRole || !roles.includes(userRole)) {
      return res.status(403).json({ message: "Forbidden: Insufficient permissions" });
    }

    next();
  };
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Setup authentication routes
  setupAuth(app);

  // Projects routes
  app.get("/api/projects", isAuthenticated, async (req, res) => {
    try {
      const projects = await storage.getAllProjects();
      res.json(projects);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch projects" });
    }
  });

  app.get("/api/projects/:id", isAuthenticated, async (req, res) => {
    try {
      const projectId = parseInt(req.params.id);
      const project = await storage.getProject(projectId);
      
      if (!project) {
        return res.status(404).json({ message: "Project not found" });
      }
      
      res.json(project);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch project" });
    }
  });

  app.post("/api/projects", isAuthenticated, async (req, res) => {
    try {
      // Log the incoming request body for debugging
      console.log("Project creation request body:", req.body);
      
      // Handle date fields properly
      const data = { ...req.body };
      
      // Convert deadline string to Date object if it exists
      if (data.deadline && typeof data.deadline === 'string') {
        try {
          data.deadline = new Date(data.deadline);
        } catch (dateError: unknown) {
          return res.status(400).json({ 
            message: `Invalid date format for deadline: ${dateError.message || "Unknown error"}` 
          });
        }
      }
      
      const validatedData = insertProjectSchema.parse({
        ...data,
        owner_id: req.user?.id
      });

      const project = await storage.createProject(validatedData);
      
      // Create an activity record
      await storage.createActivity({
        action: "create_project",
        description: `created project: ${project.name}`,
        user_id: req.user!.id,
        project_id: project.id
      });

      res.status(201).json(project);
    } catch (error) {
      console.error("Project creation error:", error);
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: "Failed to create project" });
      }
    }
  });

  app.put("/api/projects/:id", isAuthenticated, async (req, res) => {
    try {
      const projectId = parseInt(req.params.id);
      const project = await storage.getProject(projectId);
      
      if (!project) {
        return res.status(404).json({ message: "Project not found" });
      }
      
      // Only owner or admin can update project
      if (project.owner_id !== req.user?.id && req.user?.role !== "admin") {
        return res.status(403).json({ message: "Forbidden: Not project owner" });
      }
      
      // Handle date fields properly
      const data = { ...req.body };
      
      // Convert deadline string to Date object if it exists
      if (data.deadline && typeof data.deadline === 'string') {
        try {
          data.deadline = new Date(data.deadline);
        } catch (dateError: unknown) {
          return res.status(400).json({ 
            message: `Invalid date format for deadline: ${dateError instanceof Error ? dateError.message : "Unknown error"}` 
          });
        }
      }
      
      const updatedProject = await storage.updateProject(projectId, data);
      
      await storage.createActivity({
        action: "update_project",
        description: `updated project: ${project.name}`,
        user_id: req.user!.id,
        project_id: project.id
      });
      
      res.json(updatedProject);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: "Failed to update project" });
      }
    }
  });

  app.delete("/api/projects/:id", isAuthenticated, async (req, res) => {
    try {
      const projectId = parseInt(req.params.id);
      const project = await storage.getProject(projectId);
      
      if (!project) {
        return res.status(404).json({ message: "Project not found" });
      }
      
      // Only owner or admin can delete project
      if (project.owner_id !== req.user?.id && req.user?.role !== "admin") {
        return res.status(403).json({ message: "Forbidden: Not project owner" });
      }
      
      await storage.deleteProject(projectId);
      
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete project" });
    }
  });

  // Project members routes
  app.get("/api/projects/:id/members", isAuthenticated, async (req, res) => {
    try {
      const projectId = parseInt(req.params.id);
      const project = await storage.getProject(projectId);
      
      if (!project) {
        return res.status(404).json({ message: "Project not found" });
      }
      
      const members = await storage.getProjectMembers(projectId);
      const memberIds = members.map(member => member.user_id);
      // Also include the project owner
      memberIds.push(project.owner_id);
      
      const uniqueIds = Array.from(new Set(memberIds));
      const users = await storage.getUsersByIds(uniqueIds);
      
      res.json(users);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch project members" });
    }
  });

  app.post("/api/projects/:id/members", isAuthenticated, hasRole(["admin", "team_leader"]), async (req, res) => {
    try {
      const projectId = parseInt(req.params.id);
      const project = await storage.getProject(projectId);
      
      if (!project) {
        return res.status(404).json({ message: "Project not found" });
      }
      
      // Only owner or admin can add members
      if (project.owner_id !== req.user?.id && req.user?.role !== "admin") {
        return res.status(403).json({ message: "Forbidden: Not project owner" });
      }
      
      const validatedData = insertProjectMemberSchema.parse({
        project_id: projectId,
        user_id: req.body.user_id
      });
      
      const member = await storage.addProjectMember(validatedData);
      const addedUser = await storage.getUser(req.body.user_id);
      
      await storage.createActivity({
        action: "add_member",
        description: `added ${addedUser?.name || 'a user'} to project: ${project.name}`,
        user_id: req.user!.id,
        project_id: project.id
      });
      
      res.status(201).json(member);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: "Failed to add project member" });
      }
    }
  });

  app.delete("/api/projects/:projectId/members/:userId", isAuthenticated, hasRole(["admin", "team_leader"]), async (req, res) => {
    try {
      const projectId = parseInt(req.params.projectId);
      const userId = parseInt(req.params.userId);
      
      const project = await storage.getProject(projectId);
      
      if (!project) {
        return res.status(404).json({ message: "Project not found" });
      }
      
      // Only owner or admin can remove members
      if (project.owner_id !== req.user?.id && req.user?.role !== "admin") {
        return res.status(403).json({ message: "Forbidden: Not project owner" });
      }
      
      await storage.removeProjectMember(projectId, userId);
      const removedUser = await storage.getUser(userId);
      
      await storage.createActivity({
        action: "remove_member",
        description: `removed ${removedUser?.name || 'a user'} from project: ${project.name}`,
        user_id: req.user!.id,
        project_id: project.id
      });
      
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to remove project member" });
    }
  });

  // Tasks routes
  app.get("/api/tasks", isAuthenticated, async (req, res) => {
    try {
      let tasks;
      const projectId = req.query.projectId ? parseInt(req.query.projectId as string) : null;
      const userId = req.query.assigneeId ? parseInt(req.query.assigneeId as string) : null;
      
      if (projectId) {
        tasks = await storage.getProjectTasks(projectId);
      } else if (userId) {
        tasks = await storage.getUserTasks(userId);
      } else {
        // Return user's tasks by default
        tasks = await storage.getUserTasks(req.user!.id);
      }
      
      res.json(tasks);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch tasks" });
    }
  });

  app.get("/api/tasks/:id", isAuthenticated, async (req, res) => {
    try {
      const taskId = parseInt(req.params.id);
      const task = await storage.getTask(taskId);
      
      if (!task) {
        return res.status(404).json({ message: "Task not found" });
      }
      
      res.json(task);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch task" });
    }
  });

  app.post("/api/tasks", isAuthenticated, async (req, res) => {
    try {
      const taskData = { ...req.body };
      
      // Convert deadline string to Date object if it exists
      if (taskData.deadline && typeof taskData.deadline === 'string') {
        try {
          taskData.deadline = new Date(taskData.deadline);
        } catch (error) {
          return res.status(400).json({ 
            message: "Invalid date format for deadline" 
          });
        }
      }
      
      const validatedData = insertTaskSchema.parse({
        ...taskData,
        creator_id: req.user?.id
      });
      
      const task = await storage.createTask(validatedData);
      
      await storage.createActivity({
        action: "create_task",
        description: `created task: ${task.title}`,
        user_id: req.user!.id,
        project_id: task.project_id,
        task_id: task.id
      });
      
      res.status(201).json(task);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: "Failed to create task" });
      }
    }
  });

  app.patch("/api/tasks/:id", isAuthenticated, async (req, res) => {
    try {
      const taskId = parseInt(req.params.id);
      const task = await storage.getTask(taskId);
      
      if (!task) {
        return res.status(404).json({ message: "Task not found" });
      }
      
      const updatedData = { ...req.body };
      
      // Convert deadline string to Date object if it exists
      if (updatedData.deadline && typeof updatedData.deadline === 'string') {
        try {
          updatedData.deadline = new Date(updatedData.deadline);
        } catch (error) {
          return res.status(400).json({ 
            message: "Invalid date format for deadline" 
          });
        }
      }
      
      // If marking as completed
      if (updatedData.status === TaskStatus.COMPLETED && task.status !== TaskStatus.COMPLETED) {
        updatedData.completed_at = new Date();
      }
      
      const updatedTask = await storage.updateTask(taskId, updatedData);
      
      await storage.createActivity({
        action: "update_task",
        description: `updated task: ${task.title}`,
        user_id: req.user!.id,
        project_id: task.project_id,
        task_id: task.id
      });
      
      res.json(updatedTask);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: "Failed to update task" });
      }
    }
  });

  app.put("/api/tasks/:id", isAuthenticated, async (req, res) => {
    try {
      const taskId = parseInt(req.params.id);
      const task = await storage.getTask(taskId);
      
      if (!task) {
        return res.status(404).json({ message: "Task not found" });
      }
      
      const updatedData = { ...req.body };
      
      // Convert deadline string to Date object if it exists
      if (updatedData.deadline && typeof updatedData.deadline === 'string') {
        try {
          updatedData.deadline = new Date(updatedData.deadline);
        } catch (error) {
          return res.status(400).json({ 
            message: "Invalid date format for deadline" 
          });
        }
      }
      
      // If marking as completed
      if (updatedData.status === TaskStatus.COMPLETED && task.status !== TaskStatus.COMPLETED) {
        updatedData.completed_at = new Date();
      }
      
      const updatedTask = await storage.updateTask(taskId, updatedData);
      
      await storage.createActivity({
        action: "update_task",
        description: `updated task: ${task.title}`,
        user_id: req.user!.id,
        project_id: task.project_id,
        task_id: task.id
      });
      
      res.json(updatedTask);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: "Failed to update task" });
      }
    }
  });

  app.delete("/api/tasks/:id", isAuthenticated, async (req, res) => {
    try {
      const taskId = parseInt(req.params.id);
      const task = await storage.getTask(taskId);
      
      if (!task) {
        return res.status(404).json({ message: "Task not found" });
      }
      
      // Only creator, project owner, or admin can delete tasks
      const project = await storage.getProject(task.project_id);
      if (task.creator_id !== req.user?.id && project?.owner_id !== req.user?.id && req.user?.role !== "admin") {
        return res.status(403).json({ message: "Forbidden: Insufficient permissions to delete this task" });
      }
      
      await storage.deleteTask(taskId);
      
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete task" });
    }
  });

  // Comments routes
  app.get("/api/tasks/:id/comments", isAuthenticated, async (req, res) => {
    try {
      const taskId = parseInt(req.params.id);
      const comments = await storage.getTaskComments(taskId);
      res.json(comments);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch comments" });
    }
  });

  app.post("/api/comments", isAuthenticated, async (req, res) => {
    try {
      const validatedData = insertCommentSchema.parse({
        ...req.body,
        user_id: req.user?.id
      });
      
      const comment = await storage.createComment(validatedData);
      
      // Create an activity for task comment
      if (comment.task_id) {
        const task = await storage.getTask(comment.task_id);
        await storage.createActivity({
          action: "comment",
          description: `commented on task: ${task?.title || 'a task'}`,
          user_id: req.user!.id,
          project_id: task?.project_id,
          task_id: comment.task_id
        });
      }
      
      // Create an activity for project comment
      if (comment.project_id) {
        const project = await storage.getProject(comment.project_id);
        await storage.createActivity({
          action: "comment",
          description: `commented on project: ${project?.name || 'a project'}`,
          user_id: req.user!.id,
          project_id: comment.project_id
        });
      }
      
      res.status(201).json(comment);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: "Failed to create comment" });
      }
    }
  });

  // Activities routes
  app.get("/api/activities", isAuthenticated, async (req, res) => {
    try {
      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;
      const activities = await storage.getRecentActivities(limit);
      
      // Get user details for each activity
      const userIds = activities.map(activity => activity.user_id);
      const uniqueIds = Array.from(new Set(userIds));
      const users = await storage.getUsersByIds(uniqueIds);
      
      // Map users to activities
      const activitiesWithUsers = activities.map(activity => {
        const user = users.find(u => u.id === activity.user_id);
        return {
          ...activity,
          user: user ? { id: user.id, name: user.name, username: user.username, avatar: user.avatar } : undefined
        };
      });
      
      res.json(activitiesWithUsers);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch activities" });
    }
  });

  // Users routes
  app.get("/api/users", isAuthenticated, async (req, res) => {
    try {
      let users;
      const role = req.query.role as string;
      
      if (role) {
        users = await storage.getUsersByRole(role);
      } else {
        // Return all users for now (in a real app, you'd want pagination)
        // Get unique user IDs from project members, tasks, etc.
        const allTasks = await storage.getAllTasks();
        const userIds = new Set<number>();
        
        // Add assignees
        allTasks.forEach(task => {
          if (task.assignee_id) userIds.add(task.assignee_id);
          if (task.creator_id) userIds.add(task.creator_id);
        });
        
        // Add the current user
        userIds.add(req.user!.id);
        
        users = await storage.getUsersByIds(Array.from(userIds));
      }
      
      res.json(users);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch users" });
    }
  });

  // Dashboard stats routes
  app.get("/api/dashboard/stats", isAuthenticated, async (req, res) => {
    try {
      const allProjects = await storage.getAllProjects();
      const allTasks = await storage.getAllTasks();
      const now = new Date();
      
      // Calculate stats
      const totalProjects = allProjects.length;
      const tasksInProgress = allTasks.filter(task => task.status === TaskStatus.IN_PROGRESS).length;
      const completedTasks = allTasks.filter(task => task.status === TaskStatus.COMPLETED).length;
      
      // Calculate tasks due soon (within 7 days)
      const nextWeek = new Date(now);
      nextWeek.setDate(nextWeek.getDate() + 7);
      const dueSoonTasks = allTasks.filter(task => {
        if (!task.deadline) return false;
        const deadline = new Date(task.deadline);
        return deadline >= now && deadline <= nextWeek && task.status !== TaskStatus.COMPLETED;
      }).length;
      
      // Calculate completed tasks this week
      const oneWeekAgo = new Date(now);
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      const completedTasksThisWeek = allTasks.filter(task => {
        if (!task.completed_at) return false;
        const completedDate = new Date(task.completed_at);
        return completedDate >= oneWeekAgo && completedDate <= now;
      }).length;
      
      // Calculate new projects this month
      const oneMonthAgo = new Date(now);
      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
      const newProjectsThisMonth = allProjects.filter(project => {
        // Note: this assumes project creation date is tracked
        // In a real app, you would have a created_at field
        return project.created_at && new Date(project.created_at) >= oneMonthAgo;
      }).length;
      
      // Get team members count
      const projectMembers = new Set<number>();
      for (const project of allProjects) {
        const members = await storage.getProjectMembers(project.id);
        members.forEach(member => projectMembers.add(member.user_id));
        projectMembers.add(project.owner_id); // Add project owner
      }
      const teamMembers = projectMembers.size;
      
      // Mock online users (in a real app, this would come from an active sessions count)
      const onlineUsers = Math.min(3, teamMembers);
      
      res.json({
        totalProjects,
        tasksInProgress,
        completedTasks,
        teamMembers,
        newProjectsThisMonth,
        dueSoonTasks,
        completedTasksThisWeek,
        onlineUsers
      });
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch dashboard stats" });
    }
  });

  // File upload routes
  app.post("/api/files/upload", isAuthenticated, upload.single("file"), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "No file uploaded" });
      }
      
      const { projectId, taskId, description } = req.body;
      
      const fileData = {
        name: req.file.originalname, 
        path: req.file.filename,
        type: req.file.mimetype,
        size: req.file.size,
        project_id: projectId ? parseInt(projectId) : null,
        task_id: taskId ? parseInt(taskId) : null,
        uploaded_by: req.user!.id,
        description: description || null
      };
      
      const file = await storage.createFile(fileData);
      
      // Create activity
      if (taskId) {
        const task = await storage.getTask(parseInt(taskId));
        await storage.createActivity({
          action: "upload_file",
          description: `uploaded file to task: ${task?.title || 'a task'}`,
          user_id: req.user!.id,
          project_id: task?.project_id,
          task_id: parseInt(taskId)
        });
      } else if (projectId) {
        const project = await storage.getProject(parseInt(projectId));
        await storage.createActivity({
          action: "upload_file",
          description: `uploaded file to project: ${project?.name || 'a project'}`,
          user_id: req.user!.id,
          project_id: parseInt(projectId)
        });
      }
      
      res.status(201).json(file);
    } catch (error) {
      if (error instanceof Error) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: "Failed to upload file" });
      }
    }
  });

  app.get("/api/files", isAuthenticated, async (req, res) => {
    try {
      let files;
      const projectId = req.query.projectId ? parseInt(req.query.projectId as string) : null;
      const taskId = req.query.taskId ? parseInt(req.query.taskId as string) : null;
      
      if (projectId) {
        files = await storage.getProjectFiles(projectId);
      } else if (taskId) {
        files = await storage.getTaskFiles(taskId);
      } else {
        // Get all files for the current user's projects
        const userProjects = await storage.getUserProjects(req.user!.id);
        const projectIds = userProjects.map(project => project.id);
        
        // Collect files from all the user's projects
        files = [];
        for (const projectId of projectIds) {
          const projectFiles = await storage.getProjectFiles(projectId);
          files.push(...projectFiles);
        }
      }
      
      // Enhance files with project and user info
      const enhancedFiles = await Promise.all(files.map(async (file) => {
        const uploader = await storage.getUser(file.uploaded_by);
        let project = null;
        let task = null;
        
        if (file.project_id) {
          project = await storage.getProject(file.project_id);
        }
        
        if (file.task_id) {
          task = await storage.getTask(file.task_id);
        }
        
        return {
          ...file,
          uploader: uploader ? {
            id: uploader.id,
            name: uploader.name,
            username: uploader.username
          } : null,
          project: project ? {
            id: project.id,
            name: project.name
          } : null,
          task: task ? {
            id: task.id,
            title: task.title
          } : null
        };
      }));
      
      res.json(enhancedFiles);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch files" });
    }
  });

  app.get("/uploads/:filename", async (req, res) => {
    const filePath = path.join(uploadDir, req.params.filename);
    if (fs.existsSync(filePath)) {
      res.sendFile(filePath);
    } else {
      res.status(404).json({ message: "File not found" });
    }
  });

  app.delete("/api/files/:id", isAuthenticated, async (req, res) => {
    try {
      const fileId = parseInt(req.params.id);
      const file = await storage.getFile(fileId);
      
      if (!file) {
        return res.status(404).json({ message: "File not found" });
      }
      
      // Check permissions - only file uploader, project owner, or admin can delete
      if (file.uploaded_by !== req.user?.id) {
        // Check if user is project owner
        let hasPermission = false;
        
        if (file.project_id) {
          const project = await storage.getProject(file.project_id);
          if (project && project.owner_id === req.user?.id) {
            hasPermission = true;
          }
        }
        
        // Check if user is admin
        if (req.user?.role === "admin") {
          hasPermission = true;
        }
        
        if (!hasPermission) {
          return res.status(403).json({ message: "Forbidden: Insufficient permissions to delete this file" });
        }
      }
      
      // Delete the physical file
      try {
        fs.unlinkSync(path.join(uploadDir, file.path));
      } catch (err) {
        console.error("Error deleting file from filesystem:", err);
        // Continue with deletion from database even if file is not found
      }
      
      await storage.deleteFile(fileId);
      
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ message: "Failed to delete file" });
    }
  });

  // Chatbot endpoint
  app.post("/api/chatbot", isAuthenticated, async (req, res) => {
    handleChatRequest(req, res);
  });

  const httpServer = createServer(app);

  return httpServer;
}